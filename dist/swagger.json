{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Ability Bank API",
        "license": {
            "name": "MIT"
        }
    },
    "host": "localhost:4000",
    "basePath": "/api",
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [
      {"name":"Authentication","description":"Everything" },
      {"name":"Users","description":"Everything" },
      {"name":"Profile","description":"Everything" },
      {"name":"Apps","description":"Everything" },
      {"name":"Groups","description":"Everything" },
      {"name":"ScoreTypes","description":"Everything" }
    ],
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Logs user into the system",
                "summary": "Login",
                "tags": [
                    "Authentication"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The user was created. ",
                        "schema": {
                            "type": "object",
                            "required": [
                                "user",
                                "access_token"
                            ],
                            "properties": {
                                "user": {
                                    "$ref": "#/definitions/profile_response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body. The message will vary depending on the cause."
                    },
                    "401": {
                    "description": "Invalid token"
                  },
                    "409": {
                        "description": "Invalid or missing api token"
                    }
                }
            }
        },
        "/account/user": {
            "get": {
                "description": "This endpoint can be used to retrieve a list of users. The Authorization header should be Authorization",
                "summary": "List or search users",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],

                "parameters": [
                  {
                    "name": "Authorization",
                    "in": "header",
                    "description": "access token",
                    "required": false,
                    "schema" : {
                      "type" : "string"
                    }
                  }
                ],
                "responses": {
                    "200": {
                        "description": "The users were retrieved. ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/users_response"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body. The message will vary depending on the cause."
                    },
                    "401": {
                        "description": "Invalid token."
                    }
                }
            },
            "post": {
                "description": "Creates a new user according to the JSON object received in body.",
                "summary": "Create a user",
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The samples on the right show you every attribute that could be used.",
                        "required": true,
                        "schema" : {
                           "$ref": "#/definitions/post_users_body"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The user was created. ",
                        "schema": {
                            "$ref": "#/definitions/users_response"
                        }
                    },
                    "400": {
                        "description": "Invalid request body. The message will vary depending on the cause."
                    },
                    "409": {
                        "description": "The email or username has already been used for another user"
                    }
                }
            }
        },
        "/profile": {
          "get": {
            "description": "This endpoint can be used to retrieve user details given the user's id.",
            "summary": "Get a user's profile",
            "tags": [
              "Profile"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "The users were retrieved. ",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/profile_response"
                  }
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "401": {
                "description": "Invalid token."
              },
              "404": {
                "description": "The user does not exist."
              }
            }
          },
          "patch": {
            "description": "Updates a user with the object's properties received in the request's body (the object should be a JSON object).",
            "summary": "Update a user's profile",
            "tags": [
              "Profile"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/patch_users_by_id_body"
                }
              }
            ],
            "responses": {
              "200":{
                "description": "The user was updated. ",
                "schema": {
                  "$ref": "#/definitions/profile_response"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "Invalid or missing api token"
              }
            }
          }
        },
        "/profile/activation": {
            "patch": {
                "description": "This endpoint can be used to activation a single user based on the id.",
                "summary": "Activate a user's profile",
                "tags": [
                    "Profile"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "User status",
                        "in": "body",
                        "description": "The users status can be active and inactive",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user_status":{
                                    "$ref": "#/definitions/user_status"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "The user was updated. ",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "user_status":{
                              "$ref": "#/definitions/user_status"
                            }
                          }
                        }
                    },
                    "400": {
                        "description": "Invalid request body. The message will vary depending on the cause."
                    },
                    "409": {
                        "description": "Invalid or missing api token"
                    }
                }
            }
        },
        "/apps": {
          "get": {
            "description": "Retrieves a list of all applications. Accepts a list of fields to include or exclude.",
            "summary": "List or search apps",
            "tags": [
              "Apps"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "The users were retrieved. ",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/apps"
                  }
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "401": {
                "description": "Invalid token."
              },
              "404": {
                "description": "The user does not exist."
              }
            }
          },
          "post": {
            "description": "Creates a new application.",
            "summary": "Create an app",
            "tags": [
              "Apps"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/post_apps_body"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "The user was created. ",
                "schema": {
                  "$ref": "#/definitions/apps"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          }
        },
        "/apps/{app_id}":{
          "patch": {
            "description": "Update an application.",
            "summary": "Update an app",
            "tags": [
              "Apps"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "app_id",
                "in": "path",
                "required": true,
                "description": "The id of the app to update",
                "type": "string"
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/post_apps_body"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The user was created. ",
                "schema": {
                  "$ref": "#/definitions/apps"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          },
          "delete": {
            "description": "Deletes am app and all its related assets (admin, scores, etc) given its id.",
            "summary": "Delete an app",
            "tags": [
              "Apps"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "app_id",
                "in": "path",
                "required": true,
                "description": "The id of the app to update",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "The app was deleted. "
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          }
        },
        "/apps/{app_id}/admins":{
          "post": {
            "description": "Creates a new admin.",
            "summary": "Create an admin",
            "tags": [
              "Apps"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "app_id",
                "in": "path",
                "required": true,
                "description": "The id of the app",
                "type": "string"
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/user_id"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "The add was added. ",
                "schema": {
                  "$ref": "#/definitions/apps"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          },
          "delete": {
            "description": "Deletes an admin given its id.",
            "summary": "Delete an admin",
            "tags": [
              "Apps"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "app_id",
                "in": "path",
                "required": true,
                "description": "The id of the app",
                "type": "string"
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/user_id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The user was created. ",
                "schema": {
                  "$ref": "#/definitions/apps"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          }
        },
        "/groups": {
          "get": {
            "description": "Retrieves a list of all groups. Accepts a list of fields to include or exclude.",
            "summary": "List or search groups",
            "tags": [
              "Groups"
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "The groups were retrieved. ",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/groups"
                  }
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "401": {
                "description": "Invalid token."
              },
              "404": {
                "description": "The user does not exist."
              }
            }
          },
          "post": {
            "description": "Creates a new group.",
            "summary": "Create a group",
            "tags": [
              "Groups"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/post_groups_body"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "The group was created. ",
                "schema": {
                  "$ref": "#/definitions/groups"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          }
        },
        "/groups/{group_id}": {
          "patch": {
            "description": "Updates a group.",
            "summary": "Update an group",
            "tags": [
              "Groups"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "group_id",
                "in": "path",
                "required": true,
                "description": "The id of the group to update",
                "type": "string"
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/post_groups_body"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The group was updated. ",
                "schema": {
                  "$ref": "#/definitions/groups"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          },
          "delete": {
            "description": "Deletes a group and all its related assets (admins, users, etc) given its id.",
            "summary": "Delete a group",
            "tags": [
              "Groups"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "group_id",
                "in": "path",
                "required": true,
                "description": "The id of the group",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "The group was deleted. "
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          }
        },
        "/groups/{group_id}/admins":{
          "post": {
            "description": "Creates a new admin to group.",
            "summary": "Create a admin",
            "tags": [
              "Groups"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "group_id",
                "in": "path",
                "required": true,
                "description": "The id of the group",
                "type": "string"
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/user_id"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The group was updated. ",
                "schema": {
                  "$ref": "#/definitions/groups"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              }
            }
          },
          "delete": {
            "description": "Deletes an admin given its id.",
            "summary": "Delete an admin",
            "tags": [
              "Groups"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "group_id",
                "in": "path",
                "required": true,
                "description": "The id of the group",
                "type": "string"
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/user_id"
                  }
              }
            ],
            "responses": {
              "200": {
                "description": "The admin was deleted. ",
                "schema": {
                  "$ref": "#/definitions/groups"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              }
            }
          }
      },
        "/groups/{group_id}/members":{
          "post": {
          "description": "Creates a new member to group.",
          "summary": "Create a member",
          "tags": [
            "Groups"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "description": "The id of the group",
              "type": "string"
            },
            {
              "name": "body",
              "in": "body",
              "description": "The samples on the right show you every attribute that could be used.",
              "required": true,
              "schema" : {
                "$ref": "#/definitions/user_id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The group was updated. ",
              "schema": {
                "$ref": "#/definitions/groups"
              }
            },
            "400": {
              "description": "Invalid request body. The message will vary depending on the cause."
            }
          }
        },
          "delete": {
          "description": "Deletes a member given its id.",
          "summary": "Delete a member",
          "tags": [
            "Groups"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "description": "The id of the group",
              "type": "string"
            },
            {
              "name": "body",
              "in": "body",
              "description": "The samples on the right show you every attribute that could be used.",
              "required": true,
              "schema" : {
                "$ref": "#/definitions/user_id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The admin was deleted. ",
              "schema": {
                "$ref": "#/definitions/groups"
              }
            },
            "400": {
              "description": "Invalid request body. The message will vary depending on the cause."
            }
          }
        }
      },
        "/score-types": {
          "get": {
            "description": "Retrieves a list of all score types. Accepts a list of fields to include or exclude.",
            "summary": "List or search score types",
            "tags": [
              "ScoreTypes"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The score types were retrieved. ",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/score_type"
                  }
                }
              }
            }
          },
          "post": {
            "description": "Creates a new score types.",
            "summary": "Create a score types",
            "tags": [
              "ScoreTypes"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/post_score_type_body"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "The score type was created. ",
                "schema": {
                  "$ref": "#/definitions/score_type"
                }
              }
            }
          }
      },
        "/score-types/{score_type_id}": {
          "patch": {
            "description": "Update a score types.",
            "summary": "Update an score types",
            "tags": [
              "ScoreTypes"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "score_types_id",
                "in": "path",
                "required": true,
                "description": "The id of the score types to update",
                "type": "string"
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/post_score_type_body"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "The user was created. ",
                "schema": {
                  "$ref": "#/definitions/score_type"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          },
          "delete": {
            "description": "Deletes a score types and all its related assets (apps, etc) given its id.",
            "summary": "Delete an score type",
            "tags": [
              "ScoreTypes"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "score_types_id",
                "in": "path",
                "required": true,
                "description": "The id of the app to score type",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "The app was deleted. ",
                "schema": {
                  "$ref": "#/definitions/apps"
                }
              },
              "400": {
                "description": "Invalid request body. The message will vary depending on the cause."
              },
              "409": {
                "description": "The email or username has already been used for another user"
              }
            }
          }
      },
        "/scores/{score_type_id}": {
          "get": {
            "description": "Retrieves a list of all scores. Accepts a list of fields to include or exclude.",
            "summary": "List or search scores",
            "tags": [
              "Scores"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "score_types_id",
                "in": "path",
                "required": true,
                "description": "The id of the score types",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "The scores were retrieved. ",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/scores"
                  }
                }
              }
            }
          },
          "post": {
            "description": "Creates a new scores.",
            "summary": "Create a scores",
            "tags": [
              "Scores"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "description": "api_key",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/api_key"
                }
              },
              {
                "name": "body",
                "in": "body",
                "description": "The samples on the right show you every attribute that could be used.",
                "required": true,
                "schema" : {
                  "$ref": "#/definitions/post_scores_body"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "The scores was created. ",
                "schema": {
                  "$ref": "#/definitions/scores"
                }
              }
            }
          }
      }
    },
    "securityDefinitions":{
      "Authorization":{
        "type":"apiKey","in":"header",
        "name":"Authorization"
      }
    },
  
    "definitions": {
      "api_key": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "MHrHDcEfxjoYZgeFOTE2cBab30RNFh7HgQ....",
            "description": "api_key"
          }
        }
      },
      "post_scores_body": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type" : "integer",
            "format" : "int32",
            "example": 1,
            "description": "value of scores"
          }
        }
      },
      "post_score_type_body": {
        "type": "object",
        "required": [
          "score_type_name"
        ],
        "properties": {
          "score_type_name": {
            "type": "string",
            "example": "John's score",
            "description": "The name of the score types"
          },
          "score_type_status": {
            "$ref": "#/definitions/score_type_status"
          }
        }
      },
        "post_groups_body": {
          "type": "object",
          "required": [
            "app_name"
          ],
          "properties": {
            "group_name": {
              "type": "string",
              "example": "My Company",
              "description": "The name of the group"
            },
            "group_description": {
              "type": "string",
              "example": "https://mycompany.org",
              "description": "Free text description of the group."
            }
          }
        },
        "post_apps_body": {
          "type": "object",
          "required": [
            "group_name"
          ],
          "properties": {
            "app_name": {
              "type": "string",
              "example": "My application",
              "description": "The name of the app"
            },
            "app_description": {
              "type": "string",
              "example": "used by front-ends and untrusted parties.",
              "description": "Free text description of the app. "
            }
          }
        },
        "post_users_body": {
            "type": "object",
            "required": [
              "email",
              "password",
              "username",
              "given_name",
              "family_name"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jhon.doe@mail.com",
                    "description": "The user's email"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password",
                    "description": "The user's password"
                },
              "username": {
                "type": "string",
                "example": "johndoe",
                "description": "The user's username"
              },
              "given_name": {
                "type": "string",
                "example": "john",
                "description": "The user's given_name"
              },
              "family_name": {
                "type": "string",
                "example": "doe",
                "description": "The user's family_name"
              }
            }
        },
        "patch_users_by_id_body": {
            "type": "object",
            "required": [
              "given_name",
              "family_name"
            ],
            "properties": {
                "given_name": {
                    "type": "string",
                    "example": "john",
                    "description": "The user's given_name"
                },
                "family_name": {
                    "type": "string",
                    "example": "doe",
                    "description": "The user's family_name"
                }
            }
        },
        "users_response": {
            "type": "object",
            "required": [
                "_id",
                "email",
                "given_name",
                "family_name",
                "username"
            ],
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "5457edea1b8f22891a000004",
                    "description": "The user's unique identifier"
                },
                "email": {
                    "type": "string",
                    "example": "jhon.doe@mail.com",
                    "description": "The user's email"
                },
                "username": {
                  "type": "string",
                  "example": "johndoe",
                  "description": "The user's username"
                },
                "given_name": {
                    "type": "string",
                    "example": "john",
                    "description": "The user's given name"
                },
                "family_name": {
                    "type": "string",
                    "example": "doe",
                    "description": "The user's family name"
                },
                "user_status": {
                    "$ref": "#/definitions/user_status"
                },
                "created_at": {
                  "$ref": "#/definitions/timestamp"
                },
                "updated_at": {
                  "$ref": "#/definitions/timestamp"
                }
            }
        },
        "profile_response": {
        "type": "object",
        "required": [
          "_id",
          "email",
          "given_name",
          "family_name",
          "username"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "5457edea1b8f22891a000004",
            "description": "The user's unique identifier"
          },
          "email": {
            "type": "string",
            "example": "jhon.doe@mail.com",
            "description": "The user's email"
          },
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "The user's username"
          },
          "given_name": {
            "type": "string",
            "example": "john",
            "description": "The user's given name"
          },
          "family_name": {
            "type": "string",
            "example": "doe",
            "description": "The user's family name"
          },
          "user_status": {
            "$ref": "#/definitions/user_status"
          },
          "user_role": {
            "$ref": "#/definitions/user_role"
          },
          "apps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/app_id",
              "description": "The list of apps that the user is admin"
            }
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/group_id",
              "description": "The list of groups that the user has joined to"
            }
          },
          "created_at": {
            "$ref": "#/definitions/timestamp"
          },
          "updated_at": {
            "$ref": "#/definitions/timestamp"
          },
          "access_token": {
            "type": "string",
            "description": "Unique user token used for identification",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...."
          }
        }
      },
        "timestamp": {
          "type": "string",
          "format": "DateTime",
          "description": "ISO 8601/RFC3339 formatted DateTime",
          "example": "2016-03-17T16:35:01.000Z"
        },
        "user_status": {
            "type" : "string",
            "example": "active",
            "description" : "User status",
            "enum": [
                "active",
                "inactive"
            ]
        },
        "score_type_status": {
        "type" : "string",
        "example": "shared",
        "description" : "User status",
        "enum": [
          "shared",
          "private"
        ]
      },
        "user_role": {
          "type" : "string",
          "example": "user",
          "description" : "User role",
          "enum": [
            "admin",
            "user"
          ]
        },
        "user_id": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "0RMHrHDcEMHrHDcEfxjoYZgeFONFh7HgQ....",
              "description": "The user's unique identifier"
            }
          }
        },
        "admin_id": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "0RMHrHDcEMHrHDcEfxjoYZgeFONFh7HgQ....",
            "description": "The user's unique identifier"
          }
        }
      },
        "scores_id": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "MHrHDcEfxjoYZgeFOTE2cBab30RNFh7HgQ....",
              "description": "The score type's unique identifier"
            }
          }
        },
        "score_type_id": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "MHrHDcEfxjoYZgeFOTE2cBab30RNFh7HgQ....",
              "description": "The score type's unique identifier"
            }
          }
        },
        "app_id": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "TE2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ....",
                    "description": "The app's unique identifier"
                }
            }
        },
        "group_id": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "FtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9....",
                    "description": "The group's unique identifier"
                }
            }
        },
        "apps": {
          "type": "object",
          "properties": {
          "_id": {
            "type": "string",
            "example": "TE2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ....",
            "description": "The app's unique identifier"
          },
          "app_name": {
            "type": "string",
            "example": "My application",
            "description": "The name of the app"
          },
          "app_description": {
            "type": "string",
            "example": "used by front-ends and untrusted parties.",
            "description": "Free text description of the app. "
          },
          "api_key": {
            "type": "string",
            "example": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            "description": "The id of the app"
          },
          "secret_key": {
            "type": "string",
            "example": "MG_TNT2ver-SylNat-_VeMmd-4m0Wab",
            "description": "The app secret, it must not be public"
          },
          "admins" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/admin_id",
              "description": "The list of apps that the user is admin"
            }
          },
          "score_types" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/score_type_id",
              "description": "The list of apps that the user is admin"
            }
          },
          "created_at": {
            "$ref": "#/definitions/timestamp"
          },
          "updated_at": {
            "$ref": "#/definitions/timestamp"
          }
        }
      },
        "groups": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "TE2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ....",
            "description": "The group's unique identifier"
          },
          "group_name": {
            "type": "string",
            "example": "My Company",
            "description": "The name of the group"
          },
          "group_description": {
            "type": "string",
            "example": "https://mycompany.org",
            "description": "Free text description of the group."
          },
          "admins" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/admin_id",
              "description": "The list of admins that the user is admin"
            }
          },
          "members" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/user_id",
              "description": "The list of members that the user is member"
            }
          },
          "created_at": {
            "$ref": "#/definitions/timestamp"
          },
          "updated_at": {
            "$ref": "#/definitions/timestamp"
          }
        }
      },
        "score_type": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "TE2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ....",
              "description": "The group's unique identifier"
            },
            "score_type_name": {
              "type": "string",
              "example": "John's score",
              "description": "The name of the score types"
            },
            "scores" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/scores_id",
                "description": "The list of scores"
              }
            },
            "score_type_status": {
              "$ref": "#/definitions/score_type_status"
            },
            "app_id": {
              "type": "string",
              "example": "TE2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ....",
              "description": "The app's unique identifier"
            },
            "owner_id ": {
              "type": "string",
              "example": "FFEDwQdewfpEFEFrHD0RMHrHDch7HgQ....",
              "description": "The user's unique identifier"
            },
            "created_at": {
              "$ref": "#/definitions/timestamp"
            },
            "updated_at": {
              "$ref": "#/definitions/timestamp"
            }
          }
      },
        "scores": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "TE2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ....",
              "description": "The score types id unique identifier"
            },
            "value": {
              "type" : "integer",
              "format" : "int32",
              "example": 1,
              "description": "value of scores"
            },
            "score_type_id": {
              "type": "string",
              "example": "TE2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ....",
              "description": "The score types id unique identifier"
            },
            "owner_id ": {
              "type": "string",
              "example": "TE2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ....",
              "description": "The score types id unique identifier"
            },
            "created_at": {
              "$ref": "#/definitions/timestamp"
            },
            "updated_at": {
              "$ref": "#/definitions/timestamp"
            }
          }
      }
    }
}
